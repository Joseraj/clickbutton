#labels Featured,Phase-Implementation
#Installing and usage of the ClickButton library

= Installing =

For Arduino 0017 onwards, just extract the contents of the archive into the "libraries" folder located in your sketchbook folder.

----

= Syntax =
{{{
ClickButton buttonObject(pin [,active [,CLICKBTN_PULLUP]]);
}}}

where:
 * buttonObject is your name for the button object in code.
 * pin is the pin connected to the button
 * active denotes an active LOW or HIGH button (default is LOW)
 * CLICKBTN_PULLUP turns on the internal pullup resistor. This is only possible with active low buttons.



----



== Functions ==
(Note the _buttonObject_ is just a placeholder for the object name you use, of course)

Only one function:

{{{buttonObject.Update();}}}

Which reads the button, debounces it and updates it's click count.
This should basically be read once each main program loop.

Note that the click count is lost after the button is released and the Update() function is called.


== Public variables / members ==


=== .click ===
Returns the button click count.

This is updated on every _buttonObject.Update()_ call, and will be reset to zero after the button is released.
You probably need to save this value (See example code at the bottom of page).

{{{savedClick = buttonObject.click}}}


==== Returned click counts : ====

 * A positive number returns the number of short clicks.
 * A negative number indicates a long click (or click-and-hold).

"Short" clicks is simply the number of button clicks within a set timelimit (the _.multiclickTime_ public variable. Default 250 ms, or 0.25 seconds).

"Long" clicks absolute value is the number of clicks (including the last button hold-down). The preceding clicks counted are short clicks, only the last click is held down for a longer time.

A "click-and-hold" can be determined simply by a "long" click and checking that the button is still held down (via the _.depressed_ public variable. See the "LEDfader" example that comes with the library).


*NOTE: Changes from previous versions:*

These values are *opposite* of the previous versions. I changed them since I thought it made more sense, and since I removed the "immediate held-down click-count". Thus it reacts a bit slower and it takes at least "multiclickTime" milliseconds before a new click count is registered (default 0.25 seconds).

Another *opposite* is that the returned click count are now reset between button clicks.

I also removed the named constants for double clicks etc, as it now is simply the numerical (absolute) value.


=== .depressed ===
Returns the currently debounced button (press) state.

 * true = button is pressed down
 * false = button is not pressed down.

This value is independent of button logic (active high or low).

Intended use is for a "click-and-hold" function, by checking if a button is still held down after a long click. But it also serves as an immediate, debounced button state.

{{{if (savedClick == -1 && buttonObject.depressed == true) then its-still-held-down}}}



=== .maxPresses ===
Just a setting to set the max nr. of multiclicks allowable. Perhaps not needed, but there it is for the moment.

Default is 3, but you may change it to what you need.

{{{buttonObject.maxPresses = 4}}}


=== .debounceTime ===
Sets / gets the time limit for ignoring button bounces.

If multiple clicks / signals are received within this time limit, they are ignored (So, do not set this too high or too similar to multiclickTime. Also, do not double-click faster than this :P)

{{{buttonObject.debounceTime = 20;   // debounce time set to 20 milliseconds}}}



=== .multiclickTime ===
Sets / gets the time limit for multiple clicks

If you want to do multiple clicks (like a double click), you must do it within this time limit. Default is set to 250 ms (0.25 seconds).

{{{buttonObject.multiclickTime = 250;}}}



=== .heldDownTime ===
Sets / gets the time limit for a "long" click (holding down the button for a time).

The returned click count will be negative (indicating a long click), and the absolute nr. is the number of short clicks right before and including the long button press. 

Default "long" held-down time is set to 1 second.

{{{buttonObject.heldDownTime = 1000;  // Sets held-down time to 1 second}}}

----


= Example =
This example is one of two included with the library (Except I changed the header comment a bit here - probably to be updated in source later).

Using an active-low button, and using the internal pull-up resistor of the atmega chip:

{{{
/* ClickButton library demo

  Blinks a LED according to different clicks on one button:

    Single click - Toggle LED on/off
    Double click - Blink      (Toggles LED 2 times/second)
    Triple click - Fast blink (Toggles LED 5 times/second)
    
    Long click functions:
    (For the last click hold button for one second or longer)
    
    Single long click - Slow blink   (Toggles LED every second)
    Double long click - Sloow blink  (Toggles LED every other second)
    Triple long click - Slooow blink (Toggles LED every three seconds)


  The circuit:
  - LED attached from pin 10 to resistor (say 220-ish ohms), other side of resistor to GND (ground)
  - pushbutton attached from pin 4 to GND
  No pullup resistor needed, using the Arduino's (Atmega's) internal pullup resistor in this example.

  Based on the Arduino Debounce example.

  2010, 2013 raron
 
 GNU GPLv3 license
*/

#include "ClickButton.h"

// the LED
const int ledPin = 10;
int ledState = 0;

// the Button
const int buttonPin1 = 4;
ClickButton button1(buttonPin1, LOW, CLICKBTN_PULLUP);

// Arbitrary LED function 
int LEDfunction = 0;


void setup()
{
  pinMode(ledPin,OUTPUT);  

  // Setup button timers (all in milliseconds / ms)
  // (These are default if not set, but changeable for convenience)
  button1.maxPresses     = 3;    // max button multiclick count
  button1.debounceTime   = 20;   // Debounce timer in ms
  button1.multiclickTime = 250;  // Time limit for multi clicks
  button1.heldDownTime   = 1000; // time until "held-down clicks" register
}


void loop()
{
  // Update button state
  button1.Update();

  // Save click codes in LEDfunction, as click codes are reset at next Update()
  if (button1.click != 0) LEDfunction = button1.click;
  

  // Simply toggle LED on single clicks
  // (Cant use LEDfunction like the others here,
  //  as it would toggle on and off all the time)
  if(button1.click == 1) ledState = !ledState;

  // blink faster if double clicked
  if(LEDfunction == 2) ledState = (millis()/500)%2;

  // blink even faster if triple clicked
  if(LEDfunction == 3) ledState = (millis()/200)%2;

  // slow blink (must hold down button. 1 second long blinks)
  if(LEDfunction == -1) ledState = (millis()/1000)%2;

  // slower blink (must hold down button. 2 second loong blinks)
  if(LEDfunction == -2) ledState = (millis()/2000)%2;

  // even slower blink (must hold down button. 3 second looong blinks)
  if(LEDfunction == -3) ledState = (millis()/3000)%2;


  // update the LED
  digitalWrite(ledPin,ledState);

}

}}}